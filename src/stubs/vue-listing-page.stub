<script setup>
import { ref, inject } from 'vue';
import { use{{ class_upper_singular }}Store } from '@/stores/{{ class_lower_singular }}';
import { storeToRefs } from 'pinia';

const { search{{ class }}, destroy{{ class_upper_singular }} } = use{{ class_upper_singular }}Store();
const { all } = storeToRefs(use{{ class_upper_singular }}Store());

const params = ref({
    term: '',
    page: 1,
    sort_by: null,
    per_page: 10,
});

const search = () => {
    search{{ class }}({
        ...params.value,
    });
};

const modals = inject('modals');

const clearSearch = () => {
    params.value.term = '';
    search{{ class }}(params.value);
};

const tableUpdate = ({ page, sortBy, itemsPerPage }) => {
    Object.assign(params.value, { page, sort_by: sortBy, per_page: itemsPerPage });
    search{{ class }}(params.value);
};

const delete{{ class_upper_singular }} = async ({{ class_lower_singular }}) => {
    const confirm = await modals.show('ConfirmationModal', {
        title: 'Confirm {{ class_title }} Removal',
        prompt: 'Delete {{ class_title }}?',
    });

    if (confirm) {
        await destroy{{ class_upper_singular }}({ hash: {{ class_lower_singular }}.hash });
        search{{ class }}(params.value);
    }
};

const openModal = (modal, mode = 'Create', {{ class_lower_singular }} = null) => {
    modals.show(modal, {
        props: {{ class_lower_singular }} ? {
            {{ class_lower_singular }}: {{ class_lower_singular }},
            mode: mode
        } : {
            mode: mode,
        }
    }).then(() => {
        search{{ class }}(params.value);
    });
};
</script>

<template>
<MainContentLayout>
    <template #breadcrumb><BreadCrumb /></template>
    <template #title>{{ class_title }} Management</template>
    <template #actions>
        <StyledButton @click="openModal('{{ class }}Modal')">
            <FontAwesomeIcon icon="plus" class="mr-1" /> New {{ class_title }}
        </StyledButton>
    </template>
    <div class="grid lg:grid-cols-3 md:gap-4 md:mb-4">
        <StyledSearch
            v-model="params.term"
            v-debounce:500ms="search"
            name="search"
            :label="$t('label.search')"
            :debounce-events="['input']"
            @click:clear="clearSearch" />
    </div>
    <DataTable
        v-if="all"
        :data="all"
        :headers="[
            // { title: 'Name', key: 'full_name', value: item => `${item.first_name} ${item.last_name}` },
            // { title: 'Email', key: 'email' },
        ]"
        :actions="[
            {
                title: 'Edit',
                icon: 'mdi-pencil',
                action: (item) => openModal('{{ class }}Modal', 'Edit', item),
            },
            {
                title: 'Delete',
                icon: 'mdi-delete',
                action: (item) => delete{{ class_upper_singular }}(item),
            },
        ]"
        @table-update="tableUpdate" />
</MainContentLayout>
</template>
