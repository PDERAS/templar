<template>
<ModalWrapper body-class="modal-large-content" @close-request="$emit('close-modal')">
    <template v-slot:header>{{ header }}</template>
    <template v-slot:footer>
        <div class="flex flex-col md:flex-row md:justify-end items-center">
            <button
                :disabled="saving"
                class="button bg-primary"
                type="button"
                @click="submitForm">
                <FontAwesomeIcon
                    v-if="saving"
                    icon="circle-notch"
                    class="text-sm"
                    spin />
                Save Changes
            </button>
        </div>
    </template>

    <form @submit.prevent="submitForm">
        <div class="md:grid md:grid-cols-3 gap-x-4">
            <!-- Add Input Fields Here
                <StyledInput
                v-model="form.first_name"
                name="first_name"
                label="First Name" /> -->
        </div>
    </form>
</ModalWrapper>
</template>

<script>
import ModalWrapper from '@/components/ModalWrapper';
import { mapActions, mapState, mapGetters } from 'vuex';

export default {
    components: {
        ModalWrapper
    },

    props: {
        {{ class_lower_singular }}: {
            type: Object,
            default() {
                return {
                    hash: null,
                };
            }
        },

        mode: {
            type: String,
            default: 'Create'
        }
    },

    data() {
        return {
            form: this.{{ class_lower_singular }},
        };
    },

    computed: {
        ...mapState('app/options', [
            'roles'
        ]),

        ...mapGetters('app/loaders', [
            'isLoading'
        ]),

        saving() {
            return this.isLoading('/api/v1/{{ class_lower }}', 'post') || this.isLoading('/api/v1/{{ class_lower }}/' + this.form.hash, 'patch');
        },

        header() {
            return this.mode + ' {{ class }}';
        }
    },

    methods: {
        ...mapActions('{{ class_lower_singular }}', {
            update: 'update{{ class_upper_singular }}',
            store: 'store{{ class_upper_singular }}',
        }),

        closeModal() {
            this.$emit('close-modal');
        },

        async submitForm() {
            this.resetErrors();
            if (this.mode === 'Create') {
                await this.store({
                    ...this.form,
                }).then(_ => {
                    this.$toast.success({ title: 'Success', message: '{{ class_lower_singular }} Created'});
                });
            } else {
                await this.update({
                    ...this.form,
                    hash: this.{{ class_lower }}.hash,
                }).then(_ => {
                    this.$toast.success({ title: 'Success', message: '{{ class_lower_singular }} Updated'});
                });
            }
            this.$emit('close-modal');
        }
    }
};
</script>
