import * as {{ class_upper_singular }}Api from '@/api/{{ class_lower_singular }}';

const getDefaultState = () => ({
    all: []
});

const getters = {
    //
};

const mutations = {
    /**
     * Resets the state to its factory settings
     *
     * @param {Object} state
     */
    RESET(state) {
        Object.assign(state, getDefaultState());
    }
};

const actions = {
    /**
     * Resets the app to its default state
     *
     * @param {Object} context
     *
     * @param {Promise}
     */
    async reset({ commit }) {
        commit('RESET');
    },

    /**
     * Search {{ class_lower }}
     *
     * @param {Object} payload
     *
     * @return {Promise}
     */
    search{{ class }}(_, payload) {
        return {{ class_upper_singular }}Api.Search{{ class }}(payload);
    },

    /**
     * Store new {{ class_word }}
     *
     * @param {Object} payload
     *
     * @return {Promise}
     */
    store{{ class_upper_singular }}(_, payload) {
        return {{ class_upper_singular }}Api.Store{{ class_upper_singular }}(payload);
    },

    /**
     * Update {{ class_word }}
     *
     * @param {Object} payload
     *
     * @return {Promise}
     */
    update{{ class_upper_singular }}(_, payload) {
        return {{ class_upper_singular }}Api.Update{{ class_upper_singular }}(payload);
    },

    /**
     * Delete {{ class_word }}
     *
     * @param {Object} payload
     *
     * @return {Promise}
     */
    destroy{{ class_upper_singular }}(_, payload) {
        return {{ class_upper_singular }}Api.Destroy{{ class_upper_singular }}(payload);
    }
};

export default {
    namespaced: true,
    state: getDefaultState(),
    getters,
    mutations,
    actions
};
